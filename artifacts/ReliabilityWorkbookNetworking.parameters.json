{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "value": "ReliabilityWorkbookNetworking"
    },
    "serializedData": {
      "value": "{\n    \"version\": \"Notebook/1.0\",\n    \"items\": [\n      {\n        \"type\": 9,\n        \"content\": {\n            \"version\": \"KqlParameterItem/1.0\",\n            \"parameters\": [\n            {\n                \"id\": \"aa0176d8-14ff-4dc5-9ae7-b8029f565674\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"Subscriptions\",\n                \"type\": 6,\n                \"isRequired\": true,\n                \"multiSelect\": true,\n                \"quote\": \"'\",\n                \"delimiter\": \",\",\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [\n                    \"value::all\"\n                ],\n                \"includeAll\": true,\n                \"showDefault\": false\n                },\n                \"defaultValue\": \"value::all\",\n                \"value\": [\n                \"value::all\"\n                ]\n            },\n            {\n                \"id\": \"91aa9ba3-ed60-4472-8dd9-1c2cb6255757\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"ResourceGroup\",\n                \"label\": \"Resource Group\",\n                \"type\": 2,\n                \"isRequired\": true,\n                \"multiSelect\": true,\n                \"quote\": \"'\",\n                \"delimiter\": \",\",\n                \"query\": \"resources\\r\\n| distinct resourceGroup\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [\n                    \"value::all\"\n                ],\n                \"showDefault\": false\n                },\n                \"defaultValue\": \"value::all\",\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\"\n            },\n            {\n                \"id\": \"5a4f6d34-9f89-4ef8-b4ee-fb0580ec016d\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"Environment\",\n                \"type\": 2,\n                \"multiSelect\": true,\n                \"quote\": \"'\",\n                \"delimiter\": \",\",\n                \"query\": \"resources\\r\\n| extend Environment = case(\\r\\ntags.Environment \u003c\u003e \\\"\\\", tags.Environment,\\r\\ntags.environment \u003c\u003e \\\"\\\", tags.environment,\\r\\ntags.Env \u003c\u003e \\\"\\\", tags.Env,\\r\\ntags.env \u003c\u003e \\\"\\\", tags.env,\\r\\ntolower(name) contains \\\"prod\\\", \\\"Production\\\",\\r\\ntolower(name) contains \\\"dev\\\", \\\"Development\\\",\\r\\ntolower(name) contains \\\"qa\\\", \\\"QA\\\",\\r\\ntolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\r\\ntolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\r\\ntolower(name) contains \\\"test\\\", \\\"Test\\\",\\r\\n\\\"Undefined\\\")\\r\\n| distinct Environment\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [\n                    \"value::all\"\n                ]\n                },\n                \"defaultValue\": \"value::all\",\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\"\n            },\n            {\n                \"id\": \"9d6afcdc-172c-4bef-8bab-dc372c5d3bb4\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"TagName\",\n                \"label\": \"Tag Name\",\n                \"type\": 2,\n                \"query\": \"Resources\\r\\n| where tags != '' and tags != '[]'\\r\\n| mvexpand tags\\r\\n| extend tagName = tostring(bag_keys(tags)[0])\\r\\n| distinct tagName\\r\\n| sort by tagName asc\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": []\n                },\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"value\": null\n            },\n            {\n                \"id\": \"95781001-338b-4ed3-81dc-ce16f2a98bf0\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"TagValue\",\n                \"label\": \"Tag Value\",\n                \"type\": 2,\n                \"query\": \"Resources\\r\\n| mvexpand tags\\r\\n| extend tagName = tostring(bag_keys(tags)[0])\\r\\n| extend tagValue = tostring(tags[tagName])\\r\\n| where tags != '' and tags != '[]' and tostring(bag_keys(tags)[0]) == '{TagName}'\\r\\n| distinct tagValue\\r\\n| sort by tagValue asc\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": []\n                },\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"value\": null\n            },\n            {\n                \"id\": \"e929bc01-08ec-45fe-bc6a-4e0267460dfa\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"SLA\",\n                \"label\": \"Show SLA\",\n                \"type\": 10,\n                \"description\": \"This will show the SLA information for the focus area\",\n                \"isRequired\": true,\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [],\n                \"showDefault\": false\n                },\n                \"jsonData\": \"[{ \\\"value\\\": \\\"Yes\\\", \\\"label\\\": \\\"Yes\\\", \\\"selected\\\":true},\\r\\n {\\\"value\\\": \\\"No\\\", \\\"label\\\": \\\"No\\\"}]\"\n            },\n            {\n                \"id\": \"9581cbc6-0f0f-42be-8ae8-6fe94de00ab8\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"Help\",\n                \"label\": \"Show Help\",\n                \"type\": 10,\n                \"isRequired\": true,\n                \"typeSettings\": {\n                \"additionalResourceOptions\": []\n                },\n                \"jsonData\": \"[{\\\"value\\\": \\\"Yes\\\", \\\"label\\\": \\\"Yes\\\", \\\"selected\\\":true },\\r\\n {\\\"value\\\": \\\"No\\\", \\\"label\\\": \\\"No\\\"}]\"\n            }\n            ],\n            \"style\": \"pills\",\n            \"queryType\": 0,\n            \"resourceType\": \"microsoft.operationalinsights/workspaces\"\n        },\n        \"name\": \"parameters - 13\"\n      },\n      {\n        \"type\": 11,\n        \"content\": {\n          \"version\": \"LinkItem/1.0\",\n          \"style\": \"tabs\",\n          \"links\": [\n            {\n              \"id\": \"111d0db9-8c81-413d-9d93-bca6541aa953\",\n              \"cellValue\": \"selectedTab\",\n              \"linkTarget\": \"parameter\",\n              \"linkLabel\": \"Azure Firewall\",\n              \"subTarget\": \"AF\",\n              \"style\": \"link\"\n            },\n            {\n              \"id\": \"c7031524-3e4c-417b-8675-f49985b0e4a9\",\n              \"cellValue\": \"selectedTab\",\n              \"linkTarget\": \"parameter\",\n              \"linkLabel\": \"Azure Front Door and CDN\",\n              \"subTarget\": \"AFD\",\n              \"style\": \"link\"\n            },\n            {\n              \"id\": \"15e12511-eaa3-457d-9de5-aad6fc445c2d\",\n              \"cellValue\": \"selectedTab\",\n              \"linkTarget\": \"parameter\",\n              \"linkLabel\": \"Application Gateway\",\n              \"subTarget\": \"AG\",\n              \"style\": \"link\"\n            },\n            {\n              \"id\": \"ff60a2f0-1c78-4a47-8f21-aaee8675cc1c\",\n              \"cellValue\": \"selectedTab\",\n              \"linkTarget\": \"parameter\",\n              \"linkLabel\": \"Load Balancer\",\n              \"subTarget\": \"LB\",\n              \"style\": \"link\"\n            },\n            {\n              \"id\": \"9b2af52f-ffd5-43d7-9055-9a76f56ca89a\",\n              \"cellValue\": \"selectedTab\",\n              \"linkTarget\": \"parameter\",\n              \"linkLabel\": \"Public IP\",\n              \"subTarget\": \"PIP\",\n              \"style\": \"link\"\n            },\n            {\n              \"id\": \"947f178c-58f8-43ac-ac0a-7eddf884c712\",\n              \"cellValue\": \"selectedTab\",\n              \"linkTarget\": \"parameter\",\n              \"linkLabel\": \"VPN and ExpressRoute Gateway\",\n              \"subTarget\": \"VNETGW\",\n              \"style\": \"link\"\n            }\n          ]\n        },\n        \"name\": \"links - 5\"\n      },\n      {\n        \"type\": 12,\n        \"content\": {\n          \"version\": \"NotebookGroup/1.0\",\n          \"groupType\": \"editable\",\n          \"items\": [\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"[SLA for Load Balancer](https://azure.microsoft.com/support/legal/sla/load-balancer/)\\r\\n* We guarantee that a Load Balanced Endpoint using Azure Standard Load Balancer, serving two or more Healthy Virtual Machine Instances, will be available 99.99% of the time.\\r\\n* Basic Load Balancer is excluded from this SLA.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/load-balancer/)\",\n                \"style\": \"upsell\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"SLA\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 2 - Copy - Copy\"\n            },\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"* With Standard Load Balancer, you can scale your applications and create highly available services. Load balancer supports both inbound and outbound scenarios. Load balancer provides low latency and high throughput, and scales up to millions of flows for all TCP and UDP applications.\\r\\n* Increase availability by distributing resources within and across zones.\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                \"style\": \"info\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"Help\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 3 - Copy - Copy - Copy\"\n            },\n            {\n              \"type\": 3,\n              \"content\": {\n                \"version\": \"KqlItem/1.0\",\n                \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.network/loadbalancers'\",\n                \"size\": 3,\n                \"showExportToExcel\": true,\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"crossComponentResources\": [\n                  \"{Subscriptions}\"\n                ],\n                \"gridSettings\": {\n                  \"formatters\": [\n                    {\n                      \"columnMatch\": \"$gen_group\",\n                      \"formatter\": 13,\n                      \"formatOptions\": {\n                        \"linkTarget\": \"Resource\",\n                        \"showIcon\": true\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Type\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SkuName\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"standard\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"basic\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"gateway\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"global\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Kind\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionId\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Name\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"State\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"succeeded\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"!=\",\n                            \"thresholdValue\": \"succeeded\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Location\",\n                      \"formatter\": 17\n                    },\n                    {\n                      \"columnMatch\": \"Zones\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilityZone\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not applicable\",\n                            \"representation\": \"more\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not configured\",\n                            \"representation\": \"2\",\n                            \"text\": \"not configured\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"configured\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"public ip az config\",\n                            \"representation\": \"Normal\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"3\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"1\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilitySet\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Capacity\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"FaultDomain\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReadReplica\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AutomaticFailover\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"MultipleWriteLocations\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"StorageAutogrow\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReplicationRole\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Backup\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Environment\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"Prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionName\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ZoneRedundantRecommend\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"Configured\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"Not Configured\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"NA\",\n                            \"representation\": \"Blank\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"rowLimit\": 10000,\n                  \"hierarchySettings\": {\n                    \"treeType\": 1,\n                    \"groupBy\": [\n                      \"SubscriptionId\"\n                    ],\n                    \"expandTopLevel\": false,\n                    \"finalBy\": \"Name\"\n                  },\n                  \"labelSettings\": [\n                    {\n                      \"columnId\": \"SkuName\",\n                      \"label\": \"Sku Name\"\n                    },\n                    {\n                      \"columnId\": \"SubscriptionId\",\n                      \"label\": \"Subscription\"\n                    },\n                    {\n                      \"columnId\": \"ResourceGroup\",\n                      \"label\": \"Resource Group\"\n                    },\n                    {\n                      \"columnId\": \"OSDisk\",\n                      \"label\": \"IP Type\"\n                    }\n                  ]\n                }\n              },\n              \"name\": \"kql_networking_lb_resources_details\"\n            }\n          ]\n        },\n        \"conditionalVisibility\": {\n          \"parameterName\": \"selectedTab\",\n          \"comparison\": \"isEqualTo\",\n          \"value\": \"LB\"\n        },\n        \"name\": \"LB\"\n      },\n      {\n        \"type\": 12,\n        \"content\": {\n          \"version\": \"NotebookGroup/1.0\",\n          \"groupType\": \"editable\",\n          \"items\": [\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"* Public IP addresses allow Internet resources to communicate inbound to Azure resources. More details in [Public IP address docs](https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-addresses)\\r\\n* A public IP address prefix is a reserved range of public IP addresses in Azure. More details in [Public IP address prefix docs](https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-address-prefix)\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                \"style\": \"info\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"Help\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 1\"\n            },\n            {\n              \"type\": 3,\n              \"content\": {\n                \"version\": \"KqlItem/1.0\",\n                \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.network/publicipaddresses' or Type == 'microsoft.network/publicipprefixes'\",\n                \"size\": 0,\n                \"title\": \"Public IP addresses and IP Prefixes\",\n                \"showExportToExcel\": true,\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"crossComponentResources\": [\n                  \"{Subscriptions}\"\n                ],\n                \"gridSettings\": {\n                    \"formatters\": [\n                      {\n                        \"columnMatch\": \"$gen_group\",\n                        \"formatter\": 13,\n                        \"formatOptions\": {\n                          \"linkTarget\": \"Resource\",\n                          \"showIcon\": true\n                        }\n                      },\n                      {\n                        \"columnMatch\": \"Type\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"SkuName\",\n                        \"formatter\": 18,\n                        \"formatOptions\": {\n                          \"thresholdsOptions\": \"icons\",\n                          \"thresholdsGrid\": [\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"basic\",\n                              \"representation\": \"2\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"standard\",\n                              \"representation\": \"success\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"global\",\n                              \"representation\": \"success\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"Default\",\n                              \"thresholdValue\": null,\n                              \"representation\": \"unknown\",\n                              \"text\": \"{0}{1}\"\n                            }\n                          ]\n                        }\n                      },\n                      {\n                        \"columnMatch\": \"Kind\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"SubscriptionId\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"Name\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"State\",\n                        \"formatter\": 18,\n                        \"formatOptions\": {\n                          \"thresholdsOptions\": \"icons\",\n                          \"thresholdsGrid\": [\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"succeeded\",\n                              \"representation\": \"success\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"Default\",\n                              \"thresholdValue\": null,\n                              \"representation\": \"unknown\",\n                              \"text\": \"{0}{1}\"\n                            }\n                          ]\n                        }\n                      },\n                      {\n                      \"columnMatch\": \"Location\",\n                      \"formatter\": 17\n                    },\n                    {\n                        \"columnMatch\": \"Zones\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"AvailabilityZone\",\n                        \"formatter\": 18,\n                        \"formatOptions\": {\n                          \"thresholdsOptions\": \"icons\",\n                          \"thresholdsGrid\": [\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"not applicable\",\n                              \"representation\": \"more\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"not configured\",\n                              \"representation\": \"2\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"3\",\n                              \"representation\": \"success\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"==\",\n                              \"thresholdValue\": \"1\",\n                              \"representation\": \"2\",\n                              \"text\": \"{0}{1}\"\n                            },\n                            {\n                              \"operator\": \"Default\",\n                              \"thresholdValue\": null,\n                              \"representation\": \"unknown\",\n                              \"text\": \"{0}{1}\"\n                            }\n                          ]\n                        }\n                      },\n                      {\n                      \"columnMatch\": \"Capacity\",\n                      \"formatter\": 5\n                    },\n                    {\n                        \"columnMatch\": \"FaultDomain\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"ReadReplica\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"AutomaticFailover\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"MultipleWriteLocations\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"StorageAutogrow\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"ReplicationRole\",\n                        \"formatter\": 5\n                      },\n                      {\n                        \"columnMatch\": \"Backup\",\n                        \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Environment\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"Prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                      }\n                    ],\n                    \"rowLimit\": 10000,\n                    \"hierarchySettings\": {\n                      \"treeType\": 1,\n                      \"groupBy\": [\n                      \"SubscriptionId\",\n                      \"Capacity\"\n                      ],\n                      \"finalBy\": \"Name\"\n                    },\n                    \"labelSettings\": [\n                      {\n                        \"columnId\": \"SkuName\",\n                        \"label\": \"SKU\"\n                      },\n                      {\n                        \"columnId\": \"SubscriptionId\",\n                        \"label\": \"Subscription\"\n                      },\n                      {\n                        \"columnId\": \"ResourceGroup\",\n                        \"label\": \"Resource Group\"\n                      },\n                      {\n                        \"columnId\": \"AvailabilitySet\",\n                        \"label\": \"IP Version\"\n                      },\n                      {\n                        \"columnId\": \"Capacity\",\n                        \"label\": \"IP Type\"\n                      },\n                      {\n                        \"columnId\": \"OSDisk\",\n                        \"label\": \"IP Allocation\"\n                      }\n                    ]\n                }\n              },\n              \"name\": \"Public IP addresses and IP Prefixes\"\n            }\n          ]\n        },\n        \"conditionalVisibility\": {\n          \"parameterName\": \"selectedTab\",\n          \"comparison\": \"isEqualTo\",\n          \"value\": \"PIP\"\n        },\n        \"name\": \"PIP\"\n      },\n      {\n        \"type\": 12,\n        \"content\": {\n          \"version\": \"NotebookGroup/1.0\",\n          \"groupType\": \"editable\",\n          \"items\": [\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"[SLA for Application Gateway](https://azure.microsoft.com/support/legal/sla/application-gateway/)\\r\\n* We guarantee that each Application Gateway Cloud Service having two or more medium or larger instances, or deployments capable of supporting autoscale or zone redundancy, will be available at least 99.95% of the time.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/application-gateway/)\",\n                \"style\": \"upsell\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"SLA\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 2 - Copy - Copy\"\n            },\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"[SLA for Web Application Firewall](https://azure.microsoft.com/support/legal/sla/web-application-firewall/)\\r\\n* Web Application Firewall availability guarantees are included in the SLA of the deployment option chosen, Application Gateway or Azure Front Door. Please see the [Application Gateway SLA](https://azure.microsoft.com/support/legal/sla/application-gateway/), and [Azure Front Door SLA](https://azure.microsoft.com/support/legal/sla/frontdoor/) for more details.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/web-application-firewall/)\",\n                \"style\": \"upsell\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"SLA\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"WAF SLA\"\n            },\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"* Deploy Application Gateway with at least two instances. A single instance is a single point of failure. Use two or more instances for redundancy and scalability. In order to qualify for the SLA, you must provision two or more medium or larger instances.\\r\\n* Capacity specifies the number of instances of an application gateway.\\r\\n* An Application Gateway can scale based on customer demand and span multiple availability zones for optimal availability.\\r\\n* Two autoscaling configuration types are supported:\\r\\n\\t* Fixed capacity mode. In this mode, the application gateway does not autoscale and operates at a fixed Scale Unit capacity.\\r\\n\\t* Autoscaling mode. In this mode, the application gateway autoscales based on the application traffic pattern.\\r\\n\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                \"style\": \"info\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"Help\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 3 - Copy - Copy - Copy\"\n            },\n            {\n              \"type\": 3,\n              \"content\": {\n                \"version\": \"KqlItem/1.0\",\n                \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.network/applicationgateways'\",\n                \"size\": 3,\n                \"showExportToExcel\": true,\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"crossComponentResources\": [\n                  \"{Subscriptions}\"\n                ],\n                \"gridSettings\": {\n                  \"formatters\": [\n                    {\n                      \"columnMatch\": \"$gen_group\",\n                      \"formatter\": 13,\n                      \"formatOptions\": {\n                        \"linkTarget\": \"Resource\",\n                        \"showIcon\": true\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Type\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SkuName\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"small\",\n                            \"representation\": \"orange\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"v2\",\n                            \"representation\": \"green\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"orange\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Kind\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionId\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Name\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"State\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"running\",\n                            \"representation\": \"green\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"orange\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Location\",\n                      \"formatter\": 17\n                    },\n                    {\n                      \"columnMatch\": \"Zones\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilityZone\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"configured\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not configured\",\n                            \"representation\": \"2\",\n                            \"text\": \"not configured\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not applicable\",\n                            \"representation\": \"more\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilitySet\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Capacity\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"0\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"1\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"!=\",\n                            \"thresholdValue\": \"1\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"FaultDomain\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"OSDisk\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReadReplica\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AutomaticFailover\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"configured\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not configured\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"MultipleWriteLocations\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"StorageAutogrow\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReplicationRole\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Backup\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Environment\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"Prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionName\",\n                      \"formatter\": 5\n                    }\n                  ],\n                  \"rowLimit\": 10000,\n                  \"hierarchySettings\": {\n                    \"treeType\": 1,\n                    \"groupBy\": [\n                      \"SubscriptionId\"\n                    ],\n                    \"expandTopLevel\": false,\n                    \"finalBy\": \"Name\"\n                  },\n                  \"labelSettings\": [\n                    {\n                      \"columnId\": \"SkuName\",\n                      \"label\": \"Sku Name\"\n                    },\n                    {\n                      \"columnId\": \"SubscriptionId\",\n                      \"label\": \"Subscription\"\n                    },\n                    {\n                      \"columnId\": \"ResourceGroup\",\n                      \"label\": \"Resource Group\"\n                    },\n                    {\n                      \"columnId\": \"AutomaticFailover\",\n                      \"label\": \"Autoscaling\"\n                    }\n                  ]\n                }\n              },\n              \"name\": \"kql_networking_appgw_resources_details\"\n            }\n          ]\n        },\n        \"conditionalVisibility\": {\n          \"parameterName\": \"selectedTab\",\n          \"comparison\": \"isEqualTo\",\n          \"value\": \"AG\"\n        },\n        \"name\": \"AG\"\n      },\n      {\n        \"type\": 12,\n        \"content\": {\n          \"version\": \"NotebookGroup/1.0\",\n          \"groupType\": \"editable\",\n          \"items\": [\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"[SLA for Azure Firewall](https://azure.microsoft.com/support/legal/sla/azure-firewall/)\\r\\n* Azure Firewall offers fully stateful native firewall capabilities for Virtual Network resources, with built-in high availability and the ability to scale automatically.\\r\\n* We guarantee that Azure Firewall will be available at least 99.95% of the time, when deployed within a single Availability Zone.\\r\\n* We guarantee that Azure Firewall will be available at least 99.99% of the time, when deployed within two or more Availability Zones in the same Azure region.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/azure-firewall/)\",\n                \"style\": \"upsell\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"SLA\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"AF SLA\"\n            },\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"* Azure Firewall can be configured during deployment to span multiple Availability Zones for increased availability.\\r\\n* Refer to [Deploy an Azure Firewall with Availability Zones](https://learn.microsoft.com/azure/firewall/deploy-availability-zone-powershell) for more information.\\r\\n\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                \"style\": \"info\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"Help\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 3 - Copy - Copy - Copy\"\n            },\n            {\n              \"type\": 3,\n              \"content\": {\n                \"version\": \"KqlItem/1.0\",\n                \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.network/azurefirewalls'\",\n                \"size\": 0,\n                \"showExportToExcel\": true,\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"crossComponentResources\": [\n                  \"{Subscriptions}\"\n                ],\n                \"gridSettings\": {\n                  \"formatters\": [\n                    {\n                      \"columnMatch\": \"$gen_group\",\n                      \"formatter\": 13,\n                      \"formatOptions\": {\n                        \"linkTarget\": \"Resource\",\n                        \"showIcon\": true\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Type\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Name\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Kind\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionId\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"State\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"succeeded\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"!=\",\n                            \"thresholdValue\": \"succeeded\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Location\",\n                      \"formatter\": 17\n                    },\n                    {\n                      \"columnMatch\": \"Zones\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilityZone\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"configured\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not configured\",\n                            \"representation\": \"2\",\n                            \"text\": \"not configured\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not applicable\",\n                            \"representation\": \"more\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilitySet\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Capacity\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"FaultDomain\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"OSDisk\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReadReplica\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AutomaticFailover\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"MultipleWriteLocations\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"StorageAutogrow\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReplicationRole\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Backup\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Environment\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"Prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionName\",\n                      \"formatter\": 5\n                    }\n                  ],\n                  \"rowLimit\": 10000,\n                  \"hierarchySettings\": {\n                    \"treeType\": 1,\n                    \"groupBy\": [\n                      \"SubscriptionId\"\n                    ],\n                    \"expandTopLevel\": false,\n                    \"finalBy\": \"Name\"\n                  },\n                  \"labelSettings\": [\n                    {\n                      \"columnId\": \"SkuName\",\n                      \"label\": \"Sku Name\"\n                    },\n                    {\n                      \"columnId\": \"SubscriptionId\",\n                      \"label\": \"Subscription\"\n                    },\n                    {\n                      \"columnId\": \"ResourceGroup\",\n                      \"label\": \"Resource Group\"\n                    }\n                  ]\n                }\n              },\n              \"name\": \"kql_networking_azfw_resources_details\"\n            }\n          ]\n        },\n        \"conditionalVisibility\": {\n          \"parameterName\": \"selectedTab\",\n          \"comparison\": \"isEqualTo\",\n          \"value\": \"AF\"\n        },\n        \"name\": \"AF\"\n      },\n      {\n        \"type\": 12,\n        \"content\": {\n          \"version\": \"NotebookGroup/1.0\",\n          \"groupType\": \"editable\",\n          \"items\": [\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"[SLA for Azure Front Door and Azure Front Door (classic)](https://azure.microsoft.com/support/legal/sla/frontdoor/)\\r\\n* We guarantee that at least 99.99% of the time Azure Front Door and Azure Front Door (classic) will respond to client requests and deliver the requested content without error. We will review and accept data from any commercially reasonable independent measurement system that you choose to monitor your content. You must select a set of agents from the measurement system's list of standard agents that are generally available and represent at least five geographically diverse locations in major worldwide metropolitan areas (excluding PR of China).\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/frontdoor/)\\r\\n\\r\\n[SLA for Content Delivery Network](https://azure.microsoft.com/support/legal/sla/cdn/)\\r\\n* We guarantee that at least 99.9% of the time CDN will respond to client requests and deliver the requested content without error. We will review and accept data from any commercially reasonable independent measurement system that you choose to monitor your content. You must select a set of agents from the measurement system’s list of standard agents that are generally available and represent at least five geographically diverse locations in major worldwide metropolitan areas (excluding PR of China).\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/cdn/)\",\n                \"style\": \"upsell\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"SLA\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"AFD SLA\"\n            },\n            {\n              \"type\": 3,\n              \"content\": {\n                \"version\": \"KqlItem/1.0\",\n                \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.network/frontdoors' or Type == 'microsoft.cdn/profiles'\",\n                \"size\": 3,\n                \"showExportToExcel\": true,\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"crossComponentResources\": [\n                  \"{Subscriptions}\"\n                ],\n                \"gridSettings\": {\n                  \"formatters\": [\n                    {\n                      \"columnMatch\": \"$gen_group\",\n                      \"formatter\": 13,\n                      \"formatOptions\": {\n                        \"linkTarget\": \"Resource\",\n                        \"showIcon\": true\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Type\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SkuName\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"regex\",\n                            \"thresholdValue\": \"(classic|standard_microsoft)\",\n                            \"representation\": \"orange\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"green\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Kind\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionId\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Name\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"State\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"regex\",\n                            \"thresholdValue\": \"(enabled|active)\",\n                            \"representation\": \"green\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"regex\",\n                            \"thresholdValue\": \"(?!(enabled|active))\",\n                            \"representation\": \"orange\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Location\",\n                      \"formatter\": 17\n                    },\n                    {\n                      \"columnMatch\": \"Zones\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilityZone\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilitySet\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Capacity\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"FaultDomain\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"OSDisk\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReadReplica\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AutomaticFailover\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"MultipleWriteLocations\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"StorageAutogrow\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReplicationRole\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Backup\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionName\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ResourceState\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"Enabled\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"warning\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"rowLimit\": 10000,\n                  \"hierarchySettings\": {\n                    \"treeType\": 1,\n                    \"groupBy\": [\n                      \"SubscriptionId\"\n                    ],\n                    \"expandTopLevel\": false,\n                    \"finalBy\": \"Name\"\n                  },\n                  \"labelSettings\": [\n                    {\n                      \"columnId\": \"SubscriptionId\",\n                      \"label\": \"Subscription\"\n                    }\n                  ]\n                }\n              },\n              \"name\": \"kql_networking_afd_resources_details\"\n            }\n          ]\n        },\n        \"conditionalVisibility\": {\n          \"parameterName\": \"selectedTab\",\n          \"comparison\": \"isEqualTo\",\n          \"value\": \"AFD\"\n        },\n        \"name\": \"AFD\"\n      },\n      {\n        \"type\": 12,\n        \"content\": {\n          \"version\": \"NotebookGroup/1.0\",\n          \"groupType\": \"editable\",\n          \"items\": [\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"[SLA for VNET Gateway](https://azure.microsoft.com/support/legal/sla/vpn-gateway/)\\r\\n* We guarantee 99.9% availability for each Basic Gateway for VPN or Basic Gateway for ExpressRoute.\\r\\n* We guarantee 99.95% availability for all Gateway for VPN SKUs excluding Basic.\\r\\n* We guarantee 99.95% availability for all Gateway for ExpressRoute SKUs excluding Basic.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/vpn-gateway/)\",\n                \"style\": \"upsell\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"SLA\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 0\"\n            },\n            {\n              \"type\": 1,\n              \"content\": {\n                \"json\": \"* Azure recommends to use latest generation VPN gateways which supports zones. Active-Active connection guidance in [VPN HA docs](https://learn.microsoft.com/azure/vpn-gateway/vpn-gateway-highlyavailable)\\r\\n* [Zone Redundant Gateways](https://learn.microsoft.com/azure/vpn-gateway/about-zone-redundant-vnet-gateways) are recommended to ensure gateway redundancy\\r\\n* Design Express Route with [HA Design](https://learn.microsoft.com/azure/expressroute/designing-for-high-availability-with-expressroute)\\r\\n* Increase availability by distributing resources within and across zones.\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                \"style\": \"info\"\n              },\n              \"conditionalVisibility\": {\n                \"parameterName\": \"Help\",\n                \"comparison\": \"isEqualTo\",\n                \"value\": \"Yes\"\n              },\n              \"name\": \"text - 1\"\n            },\n            {\n              \"type\": 3,\n              \"content\": {\n                \"version\": \"KqlItem/1.0\",\n                \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.network/virtualnetworkgateways'\",\n                \"size\": 0,\n                \"title\": \"VPN and ExpressRoute Gateway\",\n                \"showExportToExcel\": true,\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"crossComponentResources\": [\n                  \"{Subscriptions}\"\n                ],\n                \"gridSettings\": {\n                  \"formatters\": [\n                    {\n                      \"columnMatch\": \"$gen_group\",\n                        \"formatter\": 13,\n                      \"formatOptions\": {\n                          \"linkTarget\": \"Resource\",\n                        \"showIcon\": true\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Type\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SkuName\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"basic\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"standard\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"high performance\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"ultra performance\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"regex\",\n                            \"thresholdValue\": \"(vpn|er)gw([1-3])az\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"regex\",\n                            \"thresholdValue\": \"(vpn|er)gw([1-3])\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Kind\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"SubscriptionId\",\n                      \"formatter\": 5\n                    },\n                    {\n                        \"columnMatch\": \"Name\",\n                        \"formatter\": 5\n                      },\n                      {\n                      \"columnMatch\": \"State\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"succeeded\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"warning\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"Location\",\n                      \"formatter\": 17\n                    },\n                    {\n                      \"columnMatch\": \"Zones\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"AvailabilitySet\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Capacity\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"2\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"1\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"FaultDomain\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"routebased\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"erpolicybased\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"policybased\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"OSDisk\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"generation1\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"generation2\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"none\",\n                            \"representation\": \"more\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"ReadReplica\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"icons\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"true\",\n                            \"representation\": \"success\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"false\",\n                            \"representation\": \"2\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"==\",\n                            \"thresholdValue\": \"not applicable\",\n                            \"representation\": \"more\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"representation\": \"unknown\",\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    },\n                    {\n                      \"columnMatch\": \"AutomaticFailover\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"MultipleWriteLocations\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"StorageAutogrow\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"ReplicationRole\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Backup\",\n                      \"formatter\": 5\n                    },\n                    {\n                      \"columnMatch\": \"Environment\",\n                      \"formatter\": 18,\n                      \"formatOptions\": {\n                        \"thresholdsOptions\": \"colors\",\n                        \"thresholdsGrid\": [\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"Prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"contains\",\n                            \"thresholdValue\": \"prod\",\n                            \"representation\": \"redBright\",\n                            \"text\": \"{0}{1}\"\n                          },\n                          {\n                            \"operator\": \"Default\",\n                            \"thresholdValue\": null,\n                            \"text\": \"{0}{1}\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"rowLimit\": 10000,\n                  \"hierarchySettings\": {\n                    \"treeType\": 1,\n                    \"groupBy\": [\n                      \"SubscriptionId\",\n                      \"AvailabilitySet\"\n                      ],\n                      \"finalBy\": \"Name\"\n                  },\n                  \"labelSettings\": [\n                    {\n                      \"columnId\": \"SkuName\",\n                      \"label\": \"SKU\"\n                    },\n                    {\n                      \"columnId\": \"SubscriptionId\",\n                      \"label\": \"Subscription\"\n                    },\n                    {\n                      \"columnId\": \"ResourceGroup\",\n                      \"label\": \"Resource Group\"\n                    },\n                    {\n                      \"columnId\": \"AvailabilitySet\",\n                      \"label\": \"Gateway Type\"\n                    },\n                    {\n                      \"columnId\": \"FaultDomain\",\n                      \"label\": \"VPN Type\"\n                    },\n                    {\n                      \"columnId\": \"OSDisk\",\n                      \"label\": \"Gateway Generation\"\n                    },\n                    {\n                      \"columnId\": \"ReadReplica\",\n                      \"label\": \"Active-Active\"\n                    }\n                  ]\n                }\n              },\n              \"name\": \"query - 2\"\n            }\n          ]\n        },\n        \"conditionalVisibility\": {\n          \"parameterName\": \"selectedTab\",\n          \"comparison\": \"isEqualTo\",\n          \"value\": \"VNETGW\"\n        },\n        \"name\": \"VPN and ER GW\"\n      }    \n    ]\n}"
    }
  }
}
