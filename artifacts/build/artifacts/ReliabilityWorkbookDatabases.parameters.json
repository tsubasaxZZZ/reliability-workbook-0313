{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "value": "ReliabilityWorkbookDatabase"
    },
    "serializedData": {
      "value": "{\n    \"version\": \"Notebook/1.0\",\n    \"items\": [\n      {\n        \"type\": 9,\n        \"content\": {\n            \"version\": \"KqlParameterItem/1.0\",\n            \"parameters\": [\n            {\n                \"id\": \"aa0176d8-14ff-4dc5-9ae7-b8029f565674\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"Subscriptions\",\n                \"type\": 6,\n                \"isRequired\": true,\n                \"multiSelect\": true,\n                \"quote\": \"'\",\n                \"delimiter\": \",\",\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [\n                    \"value::all\"\n                ],\n                \"includeAll\": true,\n                \"showDefault\": false\n                },\n                \"defaultValue\": \"value::all\",\n                \"value\": [\n                \"value::all\"\n                ]\n            },\n            {\n                \"id\": \"91aa9ba3-ed60-4472-8dd9-1c2cb6255757\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"ResourceGroup\",\n                \"label\": \"Resource Group\",\n                \"type\": 2,\n                \"isRequired\": true,\n                \"multiSelect\": true,\n                \"quote\": \"'\",\n                \"delimiter\": \",\",\n                \"query\": \"resources\\r\\n| distinct resourceGroup\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [\n                    \"value::all\"\n                ],\n                \"showDefault\": false\n                },\n                \"defaultValue\": \"value::all\",\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\"\n            },\n            {\n                \"id\": \"5a4f6d34-9f89-4ef8-b4ee-fb0580ec016d\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"Environment\",\n                \"type\": 2,\n                \"multiSelect\": true,\n                \"quote\": \"'\",\n                \"delimiter\": \",\",\n                \"query\": \"resources\\r\\n| extend Environment = case(\\r\\ntags.Environment \u003c\u003e \\\"\\\", tags.Environment,\\r\\ntags.environment \u003c\u003e \\\"\\\", tags.environment,\\r\\ntags.Env \u003c\u003e \\\"\\\", tags.Env,\\r\\ntags.env \u003c\u003e \\\"\\\", tags.env,\\r\\ntolower(name) contains \\\"prod\\\", \\\"Production\\\",\\r\\ntolower(name) contains \\\"dev\\\", \\\"Development\\\",\\r\\ntolower(name) contains \\\"qa\\\", \\\"QA\\\",\\r\\ntolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\r\\ntolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\r\\ntolower(name) contains \\\"test\\\", \\\"Test\\\",\\r\\n\\\"Undefined\\\")\\r\\n| distinct Environment\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [\n                    \"value::all\"\n                ]\n                },\n                \"defaultValue\": \"value::all\",\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\"\n            },\n            {\n                \"id\": \"9d6afcdc-172c-4bef-8bab-dc372c5d3bb4\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"TagName\",\n                \"label\": \"Tag Name\",\n                \"type\": 2,\n                \"query\": \"Resources\\r\\n| where tags != '' and tags != '[]'\\r\\n| mvexpand tags\\r\\n| extend tagName = tostring(bag_keys(tags)[0])\\r\\n| distinct tagName\\r\\n| sort by tagName asc\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": []\n                },\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"value\": null\n            },\n            {\n                \"id\": \"95781001-338b-4ed3-81dc-ce16f2a98bf0\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"TagValue\",\n                \"label\": \"Tag Value\",\n                \"type\": 2,\n                \"query\": \"Resources\\r\\n| mvexpand tags\\r\\n| extend tagName = tostring(bag_keys(tags)[0])\\r\\n| extend tagValue = tostring(tags[tagName])\\r\\n| where tags != '' and tags != '[]' and tostring(bag_keys(tags)[0]) == '{TagName}'\\r\\n| distinct tagValue\\r\\n| sort by tagValue asc\",\n                \"crossComponentResources\": [\n                \"{Subscriptions}\"\n                ],\n                \"typeSettings\": {\n                \"additionalResourceOptions\": []\n                },\n                \"queryType\": 1,\n                \"resourceType\": \"microsoft.resourcegraph/resources\",\n                \"value\": null\n            },\n            {\n                \"id\": \"e929bc01-08ec-45fe-bc6a-4e0267460dfa\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"SLA\",\n                \"label\": \"Show SLA\",\n                \"type\": 10,\n                \"description\": \"This will show the SLA information for the focus area\",\n                \"isRequired\": true,\n                \"typeSettings\": {\n                \"additionalResourceOptions\": [],\n                \"showDefault\": false\n                },\n                \"jsonData\": \"[{ \\\"value\\\": \\\"Yes\\\", \\\"label\\\": \\\"Yes\\\", \\\"selected\\\":true},\\r\\n {\\\"value\\\": \\\"No\\\", \\\"label\\\": \\\"No\\\"}]\"\n            },\n            {\n                \"id\": \"9581cbc6-0f0f-42be-8ae8-6fe94de00ab8\",\n                \"version\": \"KqlParameterItem/1.0\",\n                \"name\": \"Help\",\n                \"label\": \"Show Help\",\n                \"type\": 10,\n                \"isRequired\": true,\n                \"typeSettings\": {\n                \"additionalResourceOptions\": []\n                },\n                \"jsonData\": \"[{\\\"value\\\": \\\"Yes\\\", \\\"label\\\": \\\"Yes\\\", \\\"selected\\\":true },\\r\\n {\\\"value\\\": \\\"No\\\", \\\"label\\\": \\\"No\\\"}]\"\n            }\n            ],\n            \"style\": \"pills\",\n            \"queryType\": 0,\n            \"resourceType\": \"microsoft.operationalinsights/workspaces\"\n        },\n        \"name\": \"parameters - 13\"\n        },\n        {\n          \"type\": 12,\n          \"content\": {\n            \"version\": \"NotebookGroup/1.0\",\n            \"groupType\": \"editable\",\n            \"items\": [\n              {\n                \"type\": 11,\n                \"content\": {\n                  \"version\": \"LinkItem/1.0\",\n                  \"style\": \"tabs\",\n                  \"links\": [\n                    {\n                      \"id\": \"01f0cca4-531d-40e1-ab7f-c04ee0440e5b\",\n                      \"cellValue\": \"selectedTab\",\n                      \"linkTarget\": \"parameter\",\n                      \"linkLabel\": \"Azure SQL Database\",\n                      \"subTarget\": \"AzSQL\",\n                      \"style\": \"link\"\n                    },\n                    {\n                      \"id\": \"0df521d5-8d1b-44f0-ba5e-c133d89deb09\",\n                      \"cellValue\": \"selectedTab\",\n                      \"linkTarget\": \"parameter\",\n                      \"linkLabel\": \"Azure Synapse Analytics\",\n                      \"subTarget\": \"AzSynapse\",\n                      \"style\": \"link\"\n                    },\n                    {\n                      \"id\": \"14da2544-7eb4-418c-9ce3-082cf39e4b81\",\n                      \"cellValue\": \"selectedTab\",\n                      \"linkTarget\": \"parameter\",\n                      \"linkLabel\": \"Cosmos DB\",\n                      \"subTarget\": \"Cosmos\",\n                      \"style\": \"link\"\n                    },\n                    {\n                      \"id\": \"15e4ed4e-8927-482e-a09a-c70d1ef43b32\",\n                      \"cellValue\": \"selectedTab\",\n                      \"linkTarget\": \"parameter\",\n                      \"linkLabel\": \"MySQL\",\n                      \"subTarget\": \"MySQL\",\n                      \"style\": \"link\"\n                    },\n                    {\n                      \"id\": \"fe5d57cb-c0e8-4661-b932-953cdb6e5e49\",\n                      \"cellValue\": \"selectedTab\",\n                      \"linkTarget\": \"parameter\",\n                      \"linkLabel\": \"Redis\",\n                      \"subTarget\": \"Redis\",\n                      \"style\": \"link\"\n                    }\n                  ]\n                },\n                \"name\": \"links - 7\"\n              },\n              {\n                \"type\": 12,\n                \"content\": {\n                  \"version\": \"NotebookGroup/1.0\",\n                  \"groupType\": \"editable\",\n                  \"items\": [\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"[SLA for Azure SQL Database](https://azure.microsoft.com/support/legal/sla/sql-database/)\\r\\n* Azure SQL Database Business Critical or Premium tiers configured as Zone Redundant Deployments have an availability guarantee of at least 99.995%.\\r\\n* Azure SQL Database Business Critical or Premium tiers not configured for Zone Redundant Deployments, General Purpose, Standard, or Basic tiers, or Hyperscale tier with two or more replicas have an availability guarantee of at least 99.99%.\\r\\n* Azure SQL Database Hyperscale tier with one replica has an availability guarantee of at least 99.95% and 99.9% for zero replicas.\\r\\n* Azure SQL Database Business Critical tier configured with geo-replication has a guarantee of Recovery point objective (RPO) of 5 sec for 100% of deployed hours.\\r\\n* Azure SQL Database Business Critical tier configured with geo-replication has a guarantee of Recovery time objective (RTO) of 30 sec for 100% of deployed hours.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/sql-database/)\",\n                        \"style\": \"upsell\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"SLA\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 2 - Copy\"\n                    },\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"* Standard and Premium tiers provide a longer point-in-time restore period (35 days).\\r\\n* Enable SQL Database auditing. Auditing can be used to diagnose malicious attacks or human error.\\r\\n* Use Active Geo-Replication to create a readable secondary in a different region. If your primary database fails, or simply needs to be taken offline, perform a manual failover to the secondary database. Until you fail over, the secondary database remains read-only.\\r\\n* Consider using sharding to partition the database horizontally. Sharding can provide fault isolation.\\r\\n* Use point-in-time restore to recover from human error.\\r\\n* Use geo-restore to recover from a service outage. Geo-restore restores a database from a geo-redundant backup.\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                        \"style\": \"info\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"Help\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 3 - Copy\"\n                    },\n                    {\n                      \"type\": 3,\n                      \"content\": {\n                        \"version\": \"KqlItem/1.0\",\n                        \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.sql/servers/databases' and SkuName !contains \\\"datawarehouse\\\" and SkuName != \\\"system\\\"\",\n                        \"size\": 3,\n                        \"title\": \"Azure SQL Database\",\n                        \"showExportToExcel\": true,\n                        \"queryType\": 1,\n                        \"resourceType\": \"microsoft.resourcegraph/resources\",\n                        \"crossComponentResources\": [\n                          \"{Subscriptions}\"\n                        ],\n                        \"gridSettings\": {\n                          \"formatters\": [\n                            {\n                              \"columnMatch\": \"$gen_group\",\n                              \"formatter\": 13,\n                              \"formatOptions\": {\n                                \"linkTarget\": \"Resource\",\n                                \"showIcon\": true\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Type\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SkuName\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"basic\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"system\",\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"gp\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"premium\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"standard\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"businesscritical\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"bc\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"hs\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"elastic\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionId\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Name\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"State\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"online\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"paused\",\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Location\",\n                              \"formatter\": 17\n                            },\n                            {\n                              \"columnMatch\": \"Zones\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilityZone\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not configured\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"configured\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not applicable\",\n                                    \"representation\": \"more\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"undefined\",\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"1\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"2\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"3\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilitySet\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"FaultDomain\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"OSDisk\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"grs\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"lrs\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"zrs\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplica\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AutomaticFailover\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"MultipleWriteLocations\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"StorageAutogrow\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Backup\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Environment\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"Prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionName\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Status\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Online\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Tier\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Premium\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"BusinessCritical\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"DataWarehouse\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"StorageAccountType\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"GRS\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplicaCount\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"\u003e\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ZoneRedundant\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"false\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"\u003e\",\n                                    \"thresholdValue\": \"true\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Endpoint\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"maxSizeGB\",\n                              \"formatter\": 0,\n                              \"numberFormat\": {\n                                \"unit\": 5,\n                                \"options\": {\n                                  \"style\": \"decimal\",\n                                  \"useGrouping\": false\n                                }\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Details\",\n                              \"formatter\": 5\n                            }\n                          ],\n                          \"rowLimit\": 10000,\n                          \"hierarchySettings\": {\n                            \"treeType\": 1,\n                            \"groupBy\": [\n                              \"SubscriptionId\"\n                            ],\n                            \"expandTopLevel\": false,\n                            \"finalBy\": \"Name\"\n                          },\n                          \"labelSettings\": [\n                            {\n                              \"columnId\": \"SubscriptionId\",\n                              \"label\": \"Subscription\"\n                            },\n                            {\n                              \"columnId\": \"ResourceGroup\",\n                              \"label\": \"Resource Group\"\n                            },\n                            {\n                              \"columnId\": \"OSDisk\",\n                              \"label\": \"Storage Type\"\n                            }\n                          ]\n                        }\n                      },\n                      \"name\": \"kql_database_sqldb_resources_details\"\n                    }\n                  ]\n                },\n                \"conditionalVisibility\": {\n                  \"parameterName\": \"selectedTab\",\n                  \"comparison\": \"isEqualTo\",\n                  \"value\": \"AzSQL\"\n                },\n                \"name\": \"AzSQL\"\n              },\n              {\n                \"type\": 12,\n                \"content\": {\n                  \"version\": \"NotebookGroup/1.0\",\n                  \"groupType\": \"editable\",\n                  \"items\": [\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"[SLA for Azure Synapse Analytics (formerly Azure SQL Data Warehouse)](https://azure.microsoft.com/support/legal/sla/synapse-analytics/)\\r\\n* We guarantee that, at least 99.9% of the time client operations executed on a Synapse Analytics database will succeed.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/synapse-analytics/)\",\n                        \"style\": \"upsell\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"SLA\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 2 - Copy - Copy\"\n                    },\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"* It is recommended to keep the geo-backup feature enabled. By default, Synapse Analytics takes a full backup of your data every 24 hours for disaster recovery.\",\n                        \"style\": \"info\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"Help\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 3 - Copy - Copy\"\n                    },\n                    {\n                      \"type\": 3,\n                      \"content\": {\n                        \"version\": \"KqlItem/1.0\",\n                        \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.sql/servers/databases' and SkuName contains \\\"datawarehouse\\\"\",\n                        \"size\": 3,\n                        \"title\": \"Dedicated SQL pool (formerly SQL DW)\",\n                        \"showExportToExcel\": true,\n                        \"queryType\": 1,\n                        \"resourceType\": \"microsoft.resourcegraph/resources\",\n                        \"crossComponentResources\": [\n                          \"{Subscriptions}\"\n                        ],\n                        \"gridSettings\": {\n                          \"formatters\": [\n                            {\n                              \"columnMatch\": \"$gen_group\",\n                                \"formatter\": 13,\n                              \"formatOptions\": {\n                                  \"linkTarget\": \"Resource\",\n                                \"showIcon\": true\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Type\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Name\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionId\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"State\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"paused\",\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"online\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                                \"columnMatch\": \"Location\",\n                                \"formatter\": 17\n                              },\n                              {\n                              \"columnMatch\": \"Zones\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilityZone\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilitySet\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"FaultDomain\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"OSDisk\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"grs\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"lrs\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"lrs\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplica\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AutomaticFailover\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"MultipleWriteLocations\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"StorageAutogrow\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReplicationRole\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Backup\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Environment\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"Prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionName\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Status\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Online\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Tier\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Premium\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"BusinessCritical\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"DataWarehouse\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"StorageAccountType\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"GRS\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplicaCount\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"\u003e\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ZoneRedundant\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"false\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"\u003e\",\n                                    \"thresholdValue\": \"true\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Endpoint\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"maxSizeGB\",\n                              \"formatter\": 0,\n                              \"numberFormat\": {\n                                \"unit\": 5,\n                                \"options\": {\n                                  \"style\": \"decimal\",\n                                  \"useGrouping\": false\n                                }\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Details\",\n                              \"formatter\": 5\n                            }\n                          ],\n                          \"rowLimit\": 10000,\n                          \"hierarchySettings\": {\n                            \"treeType\": 1,\n                            \"groupBy\": [\n                              \"SubscriptionId\"\n                            ],\n                            \"expandTopLevel\": false,\n                            \"finalBy\": \"Name\"\n                          },\n                          \"labelSettings\": [\n                            {\n                              \"columnId\": \"SubscriptionId\",\n                              \"label\": \"Subscription\"\n                            },\n                            {\n                              \"columnId\": \"ResourceGroup\",\n                              \"label\": \"Resource Group\"\n                            },\n                            {\n                              \"columnId\": \"OSDisk\",\n                              \"label\": \"Storage Type\"\n                            }\n                          ]\n                        }\n                      },\n                      \"name\": \"kql_database_synapse_resources_details\"\n                    }\n                  ]\n                },\n                \"conditionalVisibility\": {\n                  \"parameterName\": \"selectedTab\",\n                  \"comparison\": \"isEqualTo\",\n                  \"value\": \"AzSynapse\"\n                },\n                \"name\": \"AzSynapse\"\n              },\n              {\n                \"type\": 12,\n                \"content\": {\n                  \"version\": \"NotebookGroup/1.0\",\n                  \"groupType\": \"editable\",\n                  \"items\": [\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"[SLA for Azure Cosmos DB](https://azure.microsoft.com/support/legal/sla/cosmos-db/)\\r\\n* The service offers comprehensive 99.99% SLAs which covers the guarantees for throughput, consistency, availability and latency for the Azure Cosmos DB Database Accounts scoped to a single Azure region configured with any of the five Consistency Levels or Database Accounts spanning multiple Azure regions, configured with any of the four relaxed Consistency Levels\\r\\n* Azure Cosmos DB allows configuring multiple Azure regions as writable endpoints for a Database Account. In this configuration, Azure Cosmos DB offers 99.999% SLA for both read and write availability\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/cosmos-db/)\",\n                        \"style\": \"upsell\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"SLA\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 0\"\n                    },\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"* It is recommended to replicate the database across regions.\\r\\n* Leverage Availability Zones whenever the region supports Availability Zones. Availability Zone region support for Cosmos DB can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region)\\r\\n* To ensure high write and read availability, configure your Azure Cosmos account to span at least two regions with multiple-write regions. This configuration will provide the highest availability, lowest latency, and best scalability for both reads and writes backed by SLAs.\\r\\n* For multi-region Azure Cosmos accounts that are configured with a single-write region, [enable automatic-failover by using Azure CLI or Azure portal](https://learn.microsoft.com/azure/cosmos-db/how-to-manage-database-account#automatic-failover). After you enable automatic failover, whenever there is a regional disaster, Cosmos DB will automatically failover your account.\\r\\n\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\",\n                        \"style\": \"info\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"Help\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 1\"\n                    },\n                    {\n                      \"type\": 3,\n                      \"content\": {\n                        \"version\": \"KqlItem/1.0\",\n                        \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.documentdb/databaseaccounts'\",\n                        \"size\": 3,\n                        \"title\": \"Cosmos DB\",\n                        \"showExportToExcel\": true,\n                        \"queryType\": 1,\n                        \"resourceType\": \"microsoft.resourcegraph/resources\",\n                        \"crossComponentResources\": [\n                          \"{Subscriptions}\"\n                        ],\n                        \"gridSettings\": {\n                          \"formatters\": [\n                            {\n                              \"columnMatch\": \"$gen_group\",\n                              \"formatter\": 13,\n                              \"formatOptions\": {\n                                \"linkTarget\": \"Resource\",\n                                \"showIcon\": true\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Type\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Name\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionId\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"State\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"succeeded\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"succeeded\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Location\",\n                              \"formatter\": 17\n                            },\n                            {\n                              \"columnMatch\": \"Zones\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilityZone\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not applicable\",\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not configured\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"not configured\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"configured\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilitySet\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Capacity\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"FaultDomain\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"OSDisk\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplica\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"warning\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"1\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"AutomaticFailover\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not Configured\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not applicable\",\n                                    \"representation\": \"gray\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"configured\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"MultipleWriteLocations\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not enabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"StorageAutogrow\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReplicationRole\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Backup\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"healthy\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"unhealthy\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"Unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Environment\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"Prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionName\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"FreeTier\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplicaCount\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"\u003c\",\n                                    \"thresholdValue\": \"2\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"\u003e=\",\n                                    \"thresholdValue\": \"2\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ZoneRedundant\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Not Configured\",\n                                    \"representation\": \"warning\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"NA\",\n                                    \"representation\": \"Blank\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Configured\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Endpoint\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"PublicNetworkAccess\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"VnetFilterEnabled\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"DatabaseAccountOfferType\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Details\",\n                              \"formatter\": 5\n                            }\n                          ],\n                          \"rowLimit\": 10000,\n                          \"hierarchySettings\": {\n                            \"treeType\": 1,\n                            \"groupBy\": [\n                              \"SubscriptionId\"\n                            ],\n                            \"expandTopLevel\": false,\n                            \"finalBy\": \"Name\"\n                          },\n                          \"labelSettings\": [\n                            {\n                              \"columnId\": \"SubscriptionId\",\n                              \"label\": \"Subscription\"\n                            },\n                            {\n                              \"columnId\": \"ResourceGroup\",\n                              \"label\": \"Resource Group\"\n                            },\n                            {\n                              \"columnId\": \"AutomaticFailover\",\n                              \"label\": \"Automatic Failover\"\n                            },\n                            {\n                              \"columnId\": \"MultipleWriteLocations\",\n                              \"label\": \"Multiple Write Locations\"\n                            }\n                          ]\n                        },\n                        \"sortBy\": []\n                      },\n                      \"name\": \"kql_database_cosmosdb_resources_details\"\n                    }\n                  ]\n                },\n                \"conditionalVisibility\": {\n                  \"parameterName\": \"selectedTab\",\n                  \"comparison\": \"isEqualTo\",\n                  \"value\": \"Cosmos\"\n                },\n                \"name\": \"Cosmos\"\n              },\n              {\n                \"type\": 12,\n                \"content\": {\n                  \"version\": \"NotebookGroup/1.0\",\n                  \"groupType\": \"editable\",\n                  \"items\": [\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"[SLA for Azure Database for MySQL server](https://azure.microsoft.com/support/legal/sla/mysql/)\\r\\n* Single Server: We guarantee at least 99.99% of the time customers will have connectivity between their Microsoft Azure Database for MySQL Server and our Internet gateway\\r\\n* Flexible Server:\\r\\n\\t- We guarantee at least 99.99% of the time customers will have connectivity to their Microsoft Azure Database for MySQL – Flexible server configured with Zone Redundant High Availability.\\r\\n\\t- We guarantee at least 99.95% of the time customers will have connectivity to their Microsoft Azure Database for MySQL – Flexible server configured with Same Zone High Availability.\\r\\n\\t- We guarantee at least 99.9% of the time customers will have connectivity to their Microsoft Azure Database for MySQL – Flexible server configured without any redundancy.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/mysql/)\",\n                        \"style\": \"upsell\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"SLA\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 0\"\n                    },\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"* It is recommended to create cross region read replicas in another region\\r\\n* Enable Availability Zone in Flexible server if the region supports Availability Zones\\r\\n* Enable backup storage redundancy as GRS instead of LRS\\r\\n* Validate and configure backup retention period\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\\r\\n\",\n                        \"style\": \"info\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"Help\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 1\"\n                    },\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"Important\\r\\n\\r\\n* Azure Database for MySQL - Single Server is on the retirement path. We strongly recommend for you to upgrade to Azure Database for MySQL - Flexible Server. \\r\\n\\r\\n\u003e For more information about migrating to Azure Database for MySQL - Flexible Server, see [What's happening to Azure Database for MySQL Single Server](https://learn.microsoft.com/azure/mysql/single-server/whats-happening-to-mysql-single-server)?\",\n                        \"style\": \"warning\"\n                      },\n                      \"name\": \"mysql-single-retirement\"\n                    },\n                    {\n                      \"type\": 3,\n                      \"content\": {\n                        \"version\": \"KqlItem/1.0\",\n                        \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.dbformysql/servers'\",\n                        \"size\": 3,\n                        \"title\": \"MySQL - Single\",\n                        \"showExportToExcel\": true,\n                        \"queryType\": 1,\n                        \"resourceType\": \"microsoft.resourcegraph/resources\",\n                        \"crossComponentResources\": [\n                          \"{Subscriptions}\"\n                        ],\n                        \"gridSettings\": {\n                          \"formatters\": [\n                            {\n                              \"columnMatch\": \"$gen_group\",\n                              \"formatter\": 13,\n                              \"formatOptions\": {\n                                \"linkTarget\": \"Resource\",\n                                \"showIcon\": true\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Type\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SkuName\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"basic\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"memoryoptimized\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"generalpurpose\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Kind\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionId\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Name\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"State\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"ready\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"ready\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Location\",\n                              \"formatter\": 17\n                            },\n                            {\n                              \"columnMatch\": \"Zones\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilityZone\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilitySet\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Capacity\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"0\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"1\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"1\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"FaultDomain\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"OSDisk\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplica\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AutomaticFailover\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"MultipleWriteLocations\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"StorageAutogrow\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"disabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ReplicationRole\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"none\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"master\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"replica\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Backup\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"healthy\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"unhealthy\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Environment\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"Prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionName\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Status\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Ready\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Tier\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Basic\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"GeneralPurpose\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"MemoryOptimized\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SkuFamily\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Gen5\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"Gen5\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"GeoRedundantBackup\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Disabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"InfrastructureEncryption\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"TlsEnforcement\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SslEnforcement\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Endpoint\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Details\",\n                              \"formatter\": 5\n                            }\n                          ],\n                          \"rowLimit\": 10000,\n                          \"hierarchySettings\": {\n                            \"treeType\": 1,\n                            \"groupBy\": [\n                              \"SubscriptionId\"\n                            ],\n                            \"expandTopLevel\": false,\n                            \"finalBy\": \"Name\"\n                          },\n                          \"labelSettings\": [\n                            {\n                              \"columnId\": \"SkuName\",\n                              \"label\": \"Sku Name\"\n                            },\n                            {\n                              \"columnId\": \"SubscriptionId\",\n                              \"label\": \"Subscription\"\n                            },\n                            {\n                              \"columnId\": \"ResourceGroup\",\n                              \"label\": \"Resource Group\"\n                            },\n                            {\n                              \"columnId\": \"StorageAutogrow\",\n                              \"label\": \"Storage Autogrow\"\n                            },\n                            {\n                              \"columnId\": \"ReplicationRole\",\n                              \"label\": \"Replication Role\"\n                            }\n                          ]\n                        },\n                        \"sortBy\": []\n                      },\n                      \"name\": \"kql_database_mysqlsingle_resources_details\"\n                    },\n                    {\n                      \"type\": 3,\n                      \"content\": {\n                        \"version\": \"KqlItem/1.0\",\n                        \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.dbformysql/flexibleservers'\",\n                        \"size\": 3,\n                        \"title\": \"MySQL - Flexible\",\n                        \"showExportToExcel\": true,\n                        \"queryType\": 1,\n                        \"resourceType\": \"microsoft.resourcegraph/resources\",\n                        \"crossComponentResources\": [\n                          \"{Subscriptions}\"\n                        ],\n                        \"gridSettings\": {\n                          \"formatters\": [\n                            {\n                              \"columnMatch\": \"$gen_group\",\n                              \"formatter\": 13,\n                              \"formatOptions\": {\n                                \"linkTarget\": \"Resource\",\n                                \"showIcon\": true\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Type\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SkuName\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"generalpurpose\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"memoryoptimized\",\n                                    \"representation\": \"green\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"basic\",\n                                    \"representation\": \"orange\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Kind\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionId\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Name\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"State\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"ready\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"ready\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"Blank\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Location\",\n                              \"formatter\": 17\n                            },\n                            {\n                              \"columnMatch\": \"Zones\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilityZone\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"configured\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not configured\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"AvailabilitySet\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"FaultDomain\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"OSDisk\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReadReplica\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"AutomaticFailover\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"configured\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not applicable\",\n                                    \"representation\": \"more\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"MultipleWriteLocations\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"StorageAutogrow\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"ReplicationRole\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"none\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"master\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"replica\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"not applicable\",\n                                    \"representation\": \"more\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Backup\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Environment\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"colors\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"contains\",\n                                    \"thresholdValue\": \"Prod\",\n                                    \"representation\": \"redBright\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SubscriptionName\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Tier\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Basic\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"GeneralPurpose\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"MemoryOptimized\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SslEnforcement\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Disabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"HaState\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Healthy\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"Healthy\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"HaEnabled\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Disabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"ReplicationConfiguration\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Not Configured\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Configured\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"NA\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"Endpoint\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Details\",\n                              \"formatter\": 5\n                            },\n                            {\n                              \"columnMatch\": \"Status\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Ready\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"SkuFamily\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Gen5\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"!=\",\n                                    \"thresholdValue\": \"Gen5\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"GeoRedundantBackup\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Disabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"InfrastructureEncryption\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Enabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"Disabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            },\n                            {\n                              \"columnMatch\": \"TlsEnforcement\",\n                              \"formatter\": 18,\n                              \"formatOptions\": {\n                                \"thresholdsOptions\": \"icons\",\n                                \"thresholdsGrid\": [\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"TLSEnforcementDisabled\",\n                                    \"representation\": \"2\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"==\",\n                                    \"thresholdValue\": \"TLSEnforcementEnabled\",\n                                    \"representation\": \"success\",\n                                    \"text\": \"{0}{1}\"\n                                  },\n                                  {\n                                    \"operator\": \"Default\",\n                                    \"thresholdValue\": null,\n                                    \"representation\": \"unknown\",\n                                    \"text\": \"{0}{1}\"\n                                  }\n                                ]\n                              }\n                            }\n                          ],\n                          \"rowLimit\": 10000,\n                          \"hierarchySettings\": {\n                            \"treeType\": 1,\n                            \"groupBy\": [\n                              \"SubscriptionId\"\n                            ],\n                            \"expandTopLevel\": false,\n                            \"finalBy\": \"Name\"\n                          },\n                          \"labelSettings\": [\n                            {\n                              \"columnId\": \"SkuName\",\n                              \"label\": \"Sku Name\"\n                            },\n                            {\n                              \"columnId\": \"SubscriptionId\",\n                              \"label\": \"Subscription\"\n                            },\n                            {\n                              \"columnId\": \"State\",\n                              \"label\": \"Status\"\n                            },\n                            {\n                              \"columnId\": \"ResourceGroup\",\n                              \"label\": \"Resource Group\"\n                            },\n                            {\n                              \"columnId\": \"StorageAutogrow\",\n                              \"label\": \"Storage Autogrow\"\n                            },\n                            {\n                              \"columnId\": \"ReplicationRole\",\n                              \"label\": \"Replication Role\"\n                            }\n                          ]\n                        }\n                      },\n                      \"name\": \"kql_database_mysqlflexible_resources_details\"\n                    }\n                  ]\n                },\n                \"conditionalVisibility\": {\n                  \"parameterName\": \"selectedTab\",\n                  \"comparison\": \"isEqualTo\",\n                  \"value\": \"MySQL\"\n                },\n                \"name\": \"MySQL\"\n              },\n              {\n                \"type\": 12,\n                \"content\": {\n                  \"version\": \"NotebookGroup/1.0\",\n                  \"groupType\": \"editable\",\n                  \"items\": [\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                        \"json\": \"[SLA for Azure Cache for Redis](https://azure.microsoft.com/support/legal/sla/cache/)\\r\\n\\r\\n* For any Standard, Premium, Enterprise, and Enterprise Flash tier Cache, we guarantee that you will have connectivity to the Cache Endpoint at least 99.9% of the time.\\r\\n* For any Enterprise and Enterprise Flash tier Cache deployed to three or more Availability Zones in the same Azure region, we guarantee that you will have connectivity to the Cache Endpoint at least 99.99% of the time.\\r\\n* For any Enterprise and Enterprise Flash tier Cache deployed (1) to at least three Azure regions and three or more Availability Zones in each region and (2) with active geo-replication enabled for all Cache instances, we guarantee that you will have connectivity to one regional Cache Endpoint at least 99.999% of the time.\\r\\n\\r\\n\u003e SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/cache/)\",\n                        \"style\": \"upsell\"\n                      },\n                      \"name\": \"text - 0\"\n                    },\n                    {\n                      \"type\": 1,\n                      \"content\": {\n                    \"json\": \"[Redis best practices](https://learn.microsoft.com/azure/architecture/framework/services/data/azure-cache-redis/reliability)\\r\\n\\r\\n* It is recommended to choose premium or enterprise tiers for better HA capability\\r\\n* Basic tier is not covered by SLA and hence should be avoided for production deployments.\\r\\n* It is recommended to avoid SKUs having shared CPUs for better resiliency \u0026 performance, SKU details can be referred in [docs](https://learn.microsoft.com/azure/azure-cache-for-redis/cache-planning-faq#azure-cache-for-redis-performance)\\r\\n* Enable Availability Zone if the region supports Availability Zones\\r\\n* Geo replication is preferred for DR across regions (active geo replication in case of enterprise tier). In this case replicas greater than 1 is not supported.\\r\\n\\r\\n\u003e Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \\r\\n\\r\\n\u003e At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\\r\\n\",\n                        \"style\": \"info\"\n                      },\n                      \"conditionalVisibility\": {\n                        \"parameterName\": \"Help\",\n                        \"comparison\": \"isEqualTo\",\n                        \"value\": \"Yes\"\n                      },\n                      \"name\": \"text - 1\"\n                    },\n                    {\n                      \"type\": 3,\n                      \"content\": {\n                        \"version\": \"KqlItem/1.0\",\n                        \"query\": \"resources\\n| where resourceGroup in ({ResourceGroup})\\n| extend environment = case(\\n    tags.Environment \\u003c\\u003e \\\"\\\", tags.Environment,\\n    tags.environment \\u003c\\u003e \\\"\\\", tags.environment,\\n    tags.Env \\u003c\\u003e \\\"\\\", tags.Env,\\n    tags.env \\u003c\\u003e \\\"\\\", tags.env,\\n    tolower(name) contains \\\"prod\\\", \\\"Production\\\",\\n    tolower(name) contains \\\"dev\\\", \\\"Development\\\",\\n    tolower(name) contains \\\"qa\\\", \\\"QA\\\",\\n    tolower(name) contains \\\"uat\\\", \\\"UAT\\\",\\n    tolower(name) contains \\\"sit\\\", \\\"SIT\\\",\\n    tolower(name) contains \\\"test\\\", \\\"Test\\\",\\n    \\\"Undefined\\\")\\n| where environment in ({Environment})\\n| join kind = innerunique(\\n    resources\\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\\n    | extend replaced_tags = parse_json(replaced_tags)\\n    | mv-expand replaced_tags\\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\\n    | distinct id\\n    )\\n    on id\\n| where \\n    (type == 'microsoft.compute/virtualmachines') or \\n    (type == 'microsoft.classiccompute/virtualmachines') or \\n    (type == \\\"microsoft.compute/virtualmachinescalesets\\\" and tags.aksEngineVersion !contains \\\"aks-gomod\\\") or\\n    (type == 'microsoft.web/sites') or \\n    (type == 'microsoft.web/serverfarms') or\\n    (type == \\\"microsoft.containerservice/managedclusters\\\") or \\n    (type == 'microsoft.sql/servers/databases') or \\n    (type == 'microsoft.documentdb/databaseaccounts') or \\n    (type == 'microsoft.dbformysql/servers') or \\n    (type == 'microsoft.dbformysql/flexibleservers') or \\n    (type == 'microsoft.cache/redis') or\\n    (type == \\\"microsoft.apimanagement/service\\\") or \\n    (type == \\\"microsoft.storage/storageaccounts\\\" or type == \\\"microsoft.classicstorage/storageaccounts\\\") or \\n    (type == \\\"microsoft.network/azurefirewalls\\\") or \\n    (type == \\\"microsoft.network/frontdoors\\\") or\\n    (type == \\\"microsoft.cdn/profiles\\\") or\\n    (type == \\\"microsoft.network/applicationgateways\\\") or \\n    (type == \\\"microsoft.network/loadbalancers\\\") or \\n    (type == \\\"microsoft.network/publicipaddresses\\\" or type == \\\"microsoft.network/publicipprefixes\\\") or \\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\") or \\n    (type == \\\"microsoft.recoveryservices/vaults\\\")\\n| join kind=leftouter (\\n    resources \\n    | where type == \\\"microsoft.containerservice/managedclusters\\\"\\n    // Expand per node pool to get using zone for all node pool\\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\\n    | extend AvZones = agentPoolProfiles.availabilityZones\\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\\n    | extend useAvZone = case(\\n        array_length( AvZones ) \\u003e 0, array_length( AvZones ), 0\\n    )\\n    | join kind=leftouter(\\n        resources\\n            | where type == 'microsoft.compute/virtualmachinescalesets'\\n            | extend resourceGroup = tolower(tostring(resourceGroup))\\n            | extend VmssCapacity = sku.capacity\\n            | extend vmssStorageAccountType = iff(\\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\\n            )\\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\\n    | extend AksNodePoolStorageAccountType = iff(\\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \\\"standard_lrs\\\", \\\"standard_lrs\\\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \\\",\\\")))\\n    )\\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \\n    // If even one node pool is not using a zone, it will be \\\"Not Configured\\\".\\n    | extend AvZones = iff(tostring(AvZones) == \\\"0\\\", \\\"Not Configured\\\", tostring(AvZones)), AvSets = \\\"Scale Sets\\\"\\n) on id\\n// Start - Azure Load Balancer additional logic\\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \\u003e 0, array_length(LbFeIpConfig.zones ), 0)\\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \\\"Public\\\", \\\"Private\\\")\\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\\n//| extend properties = todynamic(properties), sku = todynamic(sku), \\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\\n// End - Azure Load Balancer additional logic\\n| extend state = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\\n    type == 'microsoft.web/sites', tostring(properties.state),\\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.provisioningState),\\n    type contains \\\"storageaccounts\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/frontdoors\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(properties.resourceState),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.operationalState),\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(properties.provisioningState),\\n    type contains \\\"publicip\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.provisioningState),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(properties.provisioningState),\\n    \\\"Undefined\\\"\\n    )\\n| extend skuName = case(\\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\\n    type == 'microsoft.web/sites', tostring(properties.sku),\\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.name),\\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \\\"microsoft.storage/storageaccounts\\\", sku.name, properties.accountType)))),\\n    type == \\\"microsoft.network/azurefirewalls\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"classic_frontdoor\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", tostring(sku.name),\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.network/loadbalancers\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type contains \\\"publicip\\\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.name),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\\n    \\\"Undefined\\\"\\n    )\\n| extend avZones = case(\\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \\u003c\\u003e \\\"\\\"), AvZones,\\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \\\"Not Configured\\\",\\n    (type == 'microsoft.web/sites'), \\\"ASP AZ config\\\",\\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \\\"false\\\", 'Not Configured', 'Configured'), \\n    (type == 'microsoft.dbformysql/servers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Configured', 'Not Configured'),\\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type == \\\"microsoft.apimanagement/service\\\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \\\"zrs\\\", \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), iif(isnotnull(zones), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    (type == \\\"microsoft.network/loadbalancers\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    LbIpType =~ \\\"Public\\\", \\\"Public IP AZ Config\\\",\\n    tostring(LbAvZones) =~ \\\"0\\\", \\\"Not Configured\\\",\\n    tostring(LbAvZones)\\n    ),\\n    (type contains \\\"publicip\\\"), case( \\n    skuName =~ \\\"Basic\\\" or skuName =~ \\\"Global\\\", \\\"Not Applicable\\\",\\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\\n    ),\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Public IP AZ Config\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend avSets = case(\\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', case(\\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \\\"Not Applicable\\\",\\n    AvSets == 'Scale Sets', \\\"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\\\",\\n    \\\"Scale Sets Not Configured\\\"\\n    ),\\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', \\\"Not Applicable\\\",\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAddressVersion), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.gatewayType), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend Capacity = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\\n    type == 'microsoft.web/sites', \\\"ASP Config\\\",\\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \\\"0\\\"), // AKS with or without VMSS\\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(sku.capacity),\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\", \\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", iif(type == \\\"microsoft.network/publicipprefixes\\\", \\\"PIP-prefix\\\", \\\"Single\\\"), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.sku.capacity),\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend FaultDomain = case(\\n    type == 'microsoft.compute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.classiccompute/virtualmachines', \\\"Not Applicable\\\",\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \\\"0\\\"),  // 1 - AZ, 5 - Regional VMSS\\n    type == 'microsoft.web/sites', \\\"Not Applicable\\\",\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \\\"0\\\"),\\n    type == 'microsoft.sql/servers/databases', \\\"Not Applicable\\\",\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\" and properties.vpnType == \\\"PolicyBased\\\", \\\"ErPolicyBased\\\", tostring(properties.vpnType)), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend osDisk = case(\\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \\\"Local\\\", \\\"Ephemeral\\\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\\n    type == 'microsoft.web/sites', 'Not Applicable',\\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.platformVersion), //Field Override\\n    type contains \\\"storageaccounts\\\", tostring(split(skuName, '_', 0)[0]),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", tostring(LbIpType),  //Field Override\\n    type contains \\\"publicip\\\", tostring(properties.publicIPAllocationMethod), //Field Override\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", tostring(properties.vpnGatewayGeneration), //Field Override\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    'Not Applicable'\\n    )\\n| extend OSDisk = case(\\n    isnotempty(osDisk), osDisk,\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \\u003c\\u003e 'VM running', 'Unknown, start VM to get disk information.',\\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\\n    \\\"Unknown\\\")\\n| extend ReadReplica = case (\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\", // Synapse\\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', \\\"Not Applicable\\\",\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", tostring(properties.additionalLocations),\\n    type contains \\\"storageaccounts\\\", case(\\n        location in~ ('qatarcentral'), 'Not Applicable',\\n        split(skuName, '_', 1)[0] startswith \\\"ra\\\", \\\"Configured\\\",\\n        \\\"Not Configured\\\"\\n        ),\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", iff(properties.gatewayType == \\\"ExpressRoute\\\", \\\"Not Applicable\\\", tostring(properties.activeActive)), //Field Override,\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend AutomaticFailover = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"false\\\" and properties.enableMultipleWriteLocations == \\\"false\\\" and toint(ReadReplica) \\u003e 1), \\\"Not Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \\\"true\\\"), \\\"Configured\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/servers', \\\"Not Applicable\\\",\\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \\\"Enabled\\\", \\\"Configured\\\", \\\"Not Applicable\\\"),\\n    type == 'microsoft.cache/redis', 'Not Applicable',\\n    type == \\\"microsoft.apimanagement/service\\\", \\\"Not Applicable\\\",\\n    type contains \\\"storageaccounts\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/azurefirewalls\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/frontdoors\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.cdn/profiles\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/applicationgateways\\\", iif(isnotempty(properties.autoscaleConfiguration), \\\"Configured\\\", \\\"Not Configured\\\"),\\n    type == \\\"microsoft.network/loadbalancers\\\", \\\"Not Applicable\\\",\\n    type contains \\\"publicip\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.network/virtualnetworkgateways\\\", \\\"Not Applicable\\\",\\n    type == \\\"microsoft.recoveryservices/vaults\\\", \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend MultipleWriteLocations = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"false\\\"), \\\"Not Enabled\\\",\\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \\\"true\\\"), \\\"Enabled\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend StorageAutogrow = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\\n    (type == 'microsoft.dbformysql/flexibleservers'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| extend ReplicationRole = case(\\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.sql/servers/databases' and sku.tier \\u003c\\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \\\"replica\\\", \\\"master\\\"),\\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \\\"Not Applicable\\\",\\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \\\"Enabled\\\", 'Not Applicable', tostring(properties.replicationRole)),\\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\\n    (type == \\\"microsoft.apimanagement/service\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"storageaccounts\\\"), tostring(split(skuName, '_', 1)[0]),\\n    (type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/frontdoors\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.cdn/profiles\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/applicationgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/loadbalancers\\\"), \\\"Not Applicable\\\",\\n    (type contains \\\"publicip\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.network/virtualnetworkgateways\\\"), \\\"Not Applicable\\\",\\n    (type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Undefined\\\"\\n    )\\n| project \\n    Type = tolower(type),\\n    SkuName = tolower(skuName),\\n    Kind = tolower(kind),\\n    SubscriptionId = subscriptionId,\\n    Name = tolower(tostring(id)),\\n    State = tolower(state),\\n    Location = tolower(location),\\n    ResourceGroup = resourceGroup,\\n    Zones = tolower(tostring(zones)),\\n    AvailabilityZone = tolower(avZones),\\n    AvailabilitySet = tolower(avSets),\\n    Capacity = tolower(Capacity),\\n    FaultDomain = tolower(FaultDomain),\\n    OSDisk = tolower(OSDisk),\\n    ReadReplica = tolower(ReadReplica), \\n    AutomaticFailover = tolower(AutomaticFailover),\\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\\n    StorageAutogrow = tolower(StorageAutogrow),\\n    ReplicationRole = tolower(ReplicationRole),\\n    Environment = environment,\\n    properties\\n| join kind = leftouter (\\n    securityresources\\n    | where properties.displayName contains \\\"Azure Backup should\\\"\\n    | extend Backup = tostring(properties.status.code)\\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\\n    )\\n    on Name\\n| extend Backup = case(\\n    Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\", Backup,\\n    \\\"Unknown\\\")\\n| extend Backup = case(\\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \\\"Healthy\\\" or Backup == \\\"Unhealthy\\\"), Backup, \\n    (Type == \\\"microsoft.compute/virtualmachinescalesets\\\"), \\\"Not Applicable\\\", \\n    (Type == \\\"microsoft.containerservice/managedclusters\\\"), \\\"Not Applicable\\\",\\n    (Type == 'microsoft.sql/servers/databases'), \\\"Not Applicable\\\", \\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \\\"Geo\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \\\"Enabled\\\", \\\"Healthy\\\", \\\"Unhealthy\\\"),\\n    (Type contains \\\"storageaccounts\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.network/azurefirewalls\\\"), \\\"Not Applicable\\\",\\n    (Type == \\\"microsoft.recoveryservices/vaults\\\"), \\\"Not Applicable\\\",\\n    \\\"Unknown\\\"\\n    )\\n| extend AvailabilitySet = case(\\n    AvailabilitySet == '-', 'None',\\n    isnotempty(AvailabilitySet), AvailabilitySet,\\n    \\\"Unknown\\\")\\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\\n| where Type == 'microsoft.cache/redis'\",\n                        \"size\": 1,\n                        \"title\": \"Azure Cache for Redis\",\n                        \"showExportToExcel\": true,\n                        \"queryType\": 1,\n                        \"resourceType\": \"microsoft.resourcegraph/resources\",\n                        \"crossComponentResources\": [\n                          \"{Subscriptions}\"\n                          ],\n                          \"gridSettings\": {\n                            \"formatters\": [\n                              {\n                                \"columnMatch\": \"$gen_group\",\n                                \"formatter\": 13,\n                                \"formatOptions\": {\n                                  \"linkTarget\": \"Resource\",\n                                  \"showIcon\": true\n                                }\n                              },\n                              {\n                                \"columnMatch\": \"Subscription\",\n                                \"formatter\": 13,\n                                \"formatOptions\": {\n                                  \"linkTarget\": \"Resource\",\n                                  \"showIcon\": true\n                                }\n                              },\n                              {\n                                \"columnMatch\": \"Type\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"SkuName\",\n                                \"formatter\": 18,\n                                \"formatOptions\": {\n                                  \"thresholdsOptions\": \"icons\",\n                                  \"thresholdsGrid\": [\n                                    {\n                                      \"operator\": \"contains\",\n                                      \"thresholdValue\": \"premium\",\n                                      \"representation\": \"success\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"contains\",\n                                      \"thresholdValue\": \"enterprise\",\n                                      \"representation\": \"success\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"contains\",\n                                      \"thresholdValue\": \"basic\",\n                                      \"representation\": \"2\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"contains\",\n                                      \"thresholdValue\": \"standard\",\n                                      \"representation\": \"success\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"Default\",\n                                      \"thresholdValue\": null,\n                                      \"representation\": \"unknown\",\n                                      \"text\": \"{0}{1}\"\n                                    }\n                                  ]\n                                }\n                              },\n                              {\n                                \"columnMatch\": \"Kind\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"SubscriptionId\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"Name\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"State\",\n                                \"formatter\": 18,\n                                \"formatOptions\": {\n                                  \"thresholdsOptions\": \"icons\",\n                                  \"thresholdsGrid\": [\n                                    {\n                                      \"operator\": \"==\",\n                                      \"thresholdValue\": \"succeeded\",\n                                      \"representation\": \"success\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"Default\",\n                                      \"thresholdValue\": null,\n                                      \"representation\": \"warning\",\n                                      \"text\": \"{0}{1}\"\n                                    }\n                                  ]\n                                }\n                              },\n                              {\n                              \"columnMatch\": \"Location\",\n                              \"formatter\": 17\n                            },\n                            {\n                                \"columnMatch\": \"Zones\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"AvailabilityZone\",\n                                \"formatter\": 18,\n                                \"formatOptions\": {\n                                  \"thresholdsOptions\": \"icons\",\n                                  \"thresholdsGrid\": [\n                                    {\n                                      \"operator\": \"==\",\n                                      \"thresholdValue\": \"not applicable\",\n                                      \"representation\": \"more\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"==\",\n                                      \"thresholdValue\": \"not configured\",\n                                      \"representation\": \"2\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"regex\",\n                                      \"thresholdValue\": \"(1|2|3)\",\n                                      \"representation\": \"success\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"Default\",\n                                      \"thresholdValue\": null,\n                                      \"representation\": \"unknown\",\n                                      \"text\": \"{0}{1}\"\n                                    }\n                                  ]\n                                }\n                              },\n                              {\n                                \"columnMatch\": \"AvailabilitySet\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"Capacity\",\n                                \"formatter\": 18,\n                                \"formatOptions\": {\n                                  \"thresholdsOptions\": \"icons\",\n                                  \"thresholdsGrid\": [\n                                    {\n                                \"operator\": \"==\",\n                                \"thresholdValue\": \"c0\",\n                                      \"representation\": \"2\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"Default\",\n                                      \"thresholdValue\": null,\n                                      \"representation\": \"success\",\n                                      \"text\": \"{0}{1}\"\n                                    }\n                                  ]\n                                },\n                                \"tooltipFormat\": {\n                                  \"tooltip\": \"Shared or Dedicated CPU\"\n                                }\n                              },\n                              {\n                                \"columnMatch\": \"FaultDomain\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"OSDisk\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"ReadReplica\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"AutomaticFailover\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"MultipleWriteLocations\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"StorageAutogrow\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"ReplicationRole\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"Backup\",\n                                \"formatter\": 5\n                              },\n                              {\n                                \"columnMatch\": \"Environment\",\n                                \"formatter\": 18,\n                                \"formatOptions\": {\n                                  \"thresholdsOptions\": \"colors\",\n                                  \"thresholdsGrid\": [\n                                    {\n                                      \"operator\": \"contains\",\n                                      \"thresholdValue\": \"prod\",\n                                      \"representation\": \"redBright\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"contains\",\n                                      \"thresholdValue\": \"Prod\",\n                                      \"representation\": \"redBright\",\n                                      \"text\": \"{0}{1}\"\n                                    },\n                                    {\n                                      \"operator\": \"Default\",\n                                      \"thresholdValue\": null,\n                                      \"text\": \"{0}{1}\"\n                                    }\n                                  ]\n                                }\n                              }\n                            ],\n                            \"rowLimit\": 10000,\n                            \"hierarchySettings\": {\n                              \"treeType\": 1,\n                              \"groupBy\": [\n                                \"SubscriptionId\"\n                              ],\n                              \"finalBy\": \"Name\"\n                      },\n                            \"labelSettings\": [\n                              {\n                                \"columnId\": \"SkuName\",\n                                \"label\": \"Tier\"\n                              },\n                              {\n                                \"columnId\": \"SubscriptionId\",\n                                \"label\": \"Subscription\"\n                              },\n                              {\n                                \"columnId\": \"ResourceGroup\",\n                                \"label\": \"Resource Group\"\n                              },\n                              {\n                                \"columnId\": \"Capacity\",\n                                \"label\": \"SKU\"\n                              }\n                            ]\n                          }\n                        },\n                      \"name\": \"Azure Cache for Redis\"\n                    }\n                  ]\n                },\n                \"conditionalVisibility\": {\n                  \"parameterName\": \"selectedTab\",\n                  \"comparison\": \"isEqualTo\",\n                  \"value\": \"Redis\"\n                },\n                \"name\": \"Redis\"\n              }\n            ]\n          },\n          \"name\": \"Databases\"\n        }\n    ]\n}"
    }
  }
}
